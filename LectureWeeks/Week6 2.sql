-- 0 Many to many and one to many relationship (Relationship)

Student ID 
(student id)

Course ID
(course id)

Student Course
-- In a Join table, name base on table name  
(courseId) -- foreign key  (int not null, foreign key (CourseId) reference Course(CourseId)))
(studentId) -- foreign key  (int not null, foreign key (StudenttId )reference Student(StudentId)))

Student Course
-- In a  PURE Join table, name base on table name  
(courseId) --primary key (int primary key not null auto_increment)
(studentId) -- primary key

--PURE Join table breaks many to many into two one to many , one to many
-- Usually dont use PURE JOin

Usually
Student Course
-- In a  PURE Join table, name base on table name  
(studentCourseId) -- primary key
(courseId) 
(studentId) 


-- Creating relationship between the book and the member
-- Many to many
-- A member can borrow many books and one book can borrowed by many member


-- If you want to create  field name grade
--if you create and student, all student have one grade for all the courses he is taking
-- if create in course, all the student enrolling in that course will have that single grade?
-- grade should be in the join table
-- student id and course id gets the grade ....
-- must match first 

--1 Creating  tables

-- Since we use CSE, we have to create tables even it is not related

/*
Table Book
bookId
bookTitle
bookAuthor
bookISBN 
bookPublishingDate
*/

-- ISBN could be a good primary key, but it is better for us to have our own primary key
-- since it is generated by someone else
show databases;
use wliew;
show tables;

drop table if exists MemberBook;
drop table if exists Member;
drop table if exists Book;
drop table if exists Publisher2;

-- has to create publisher first, Book uses pubId
create table if not exists Publisher2 (
pubId int primary key not null auto_increment, -- primary key
pubName varchar(255) not null,
pubAddress varchar(10)
);


create table if not exists Book (
bookId int primary key not null auto_increment,
bookTitle varchar(255) not null,
bookAuthor varchar (255),
bookISBN varchar (20) not null,
bookPublishingDate varchar (10) not null default '0000-00-00',
pubId int unique key not null,
foreign key (pubId) references Publisher2(pubId) -- foreign key
);

insert into Publisher2 (pubName) values ("Pearson"),("Willy");

insert into Book (bookTitle, bookAuthor, bookISBN,pubId)
	values ("Operating system concepts","Dinasaur book","11111",1);

select * from Publisher2;
select * from Book;
describe Book;
describe Publisher2;



create table if not exists Member (
MemId int primary key not null auto_increment,
MemName varchar (255) not null,
MemAddress varchar (50) ,
MemType varchar (50) ,
MemDate varchar (10) ,
MemExpire varchar (10) 
);


-- Member Book hold two foreign key(Member and Book)
-- if you wanna track how many peple borrowed book, best to be at Member Book

create table if not exists MemberBook (
MemBookId int primary key not null auto_increment,
MemId int not null,
bookId int not null,
foreign key (MemId) references Member (MemId),
foreign key (bookId) references Book (bookId),
-- checks or limit the type of data that can go into a table
constraint `name` check (MemType = 'R' OR MemType = 'S')
);

select * from Member;
select * from MemberBook;
describe MemberBook;
describe Member;

--using  alter
--adding a field hometown varchar
alter table Member add hometown varchar (55) not null;
alter table Member drop MemType;
alter table Member modify MemType varchar(25);
 














